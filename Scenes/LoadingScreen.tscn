[gd_scene load_steps=4 format=3 uid="uid://cc0frvnt3afps"]

[ext_resource type="FontFile" uid="uid://0q2lkim75hwr" path="res://Fonts/VeniteAdoremus-rgRBA.ttf" id="2_venite_font"]

[sub_resource type="CSharpScript" id="CSharpScript_fu5xq"]
script/source = "using Godot;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CosmocrushGD;

public partial class LoadingScreen : Control
{
    [Export] private string menuShellScenePath = \"res://Scenes/Menu/MenuShell.tscn\";

    private PackedScene loadedMenuShellScene;

    public override void _Ready()
    {
        CallDeferred(nameof(StartLoading));
    }

    private async void StartLoading()
    {
        GD.Print(\"LoadingScreen: Starting background loading...\");

        var initializationTasks = new List<Task>();

        Task<PackedScene> menuLoadTask = LoadSceneAsync(menuShellScenePath);
        initializationTasks.Add(menuLoadTask);

        GD.Print($\"LoadingScreen: Awaiting {initializationTasks.Count} tasks...\");
        await Task.WhenAll(initializationTasks);
        GD.Print(\"LoadingScreen: All loading/initialization tasks complete.\");

        loadedMenuShellScene = await menuLoadTask;

        if (loadedMenuShellScene is null)
        {
            GD.PrintErr($\"LoadingScreen: Failed to load MenuShell scene ({menuShellScenePath}). Cannot continue.\");
            return;
        }

        GD.Print(\"LoadingScreen: Changing scene...\");

        var err = GetTree().ChangeSceneToPacked(loadedMenuShellScene);
        if (err != Error.Ok)
        {
            GD.PrintErr($\"LoadingScreen: Failed to change scene to MenuShell. Error: {err}\");
        }
    }

    private async Task<PackedScene> LoadSceneAsync(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            GD.PrintErr(\"LoadSceneAsync: Null or empty path provided.\");
            return null;
        }

        ResourceLoader.LoadThreadedRequest(path);
        GD.Print($\"LoadingScreen: Started threaded load for {path}\");

        while (true)
        {
            var status = ResourceLoader.LoadThreadedGetStatus(path);
            if (status == ResourceLoader.ThreadLoadStatus.InProgress)
            {
                await ToSignal(GetTree(), SceneTree.SignalName.ProcessFrame);
            }
            else if (status == ResourceLoader.ThreadLoadStatus.Loaded)
            {
                GD.Print($\"LoadingScreen: Threaded load finished for {path}\");
                var resource = ResourceLoader.LoadThreadedGet(path);
                return resource as PackedScene;
            }
            else
            {
                GD.PrintErr($\"LoadingScreen: Threaded load failed or invalid status for {path}. Status: {status}\");
                return null;
            }
        }
    }
}"

[sub_resource type="LabelSettings" id="LabelSettings_loading"]
font = ExtResource("2_venite_font")
font_size = 96
font_color = Color(0, 1, 1, 1)
outline_size = 4
outline_color = Color(0, 0.5, 0.5, 1)

[node name="LoadingScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("CSharpScript_fu5xq")
menuShellScenePath = null

[node name="Background" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="TitleLabel" type="Label" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -378.0
offset_top = -57.0
offset_right = 378.0
offset_bottom = 57.0
grow_horizontal = 2
grow_vertical = 2
text = "COSMOCRUSH"
label_settings = SubResource("LabelSettings_loading")
horizontal_alignment = 1
vertical_alignment = 1
